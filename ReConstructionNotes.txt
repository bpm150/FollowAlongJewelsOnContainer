Class #9 2-29-20

1) Create models
including "virtual" dependency properties (for Entity Framework, right?)
these become the foreign keys for the database tables, right?

CatalogBrand

CatalogType

CatalogItem
    public virtual CatalogType  CatalogType  { get; set; }
    public virtual CatalogBrand CatalogBrand { get; set; }
                    ^ class type  ^ property name

2) Install Entity Framework Core Nuget packages:
Manage nuget packages into this ProductCatalogApi project
// Install four packages:
// Microsoft.EntityFrameworkCore (works with any data store)
// Microsoft.EntityFrameworkCore.Relational (we will be using relational -sql- database)
// Microsoft.EntityFrameworkCore.SqlServer
// Microsoft.EntityFrameworkCore.Tools




---

Class #10 3-1-20

Ahead of using docker, set up in sql express using vs (for testing and getting set up)
Talk to local db before containerizing to docker container

        // Write the were, what and how:

        // For Entity Framework, we need to provide these three things:
        //    a) where to create tables
        //    b) what code should be converted to tables
        //    c) how: when you create them as tables, how to configure them
        //        some columns to be primary key
        //        some columns to be required
        //        some columns to be of a certain size
        //    (rules about how table to be created)


? Tables
CatalogContext.cs in Data folder of project

---
WHERE
*** Dependency Injection *** Is this "Where"? (Where to create the tables)

Two layers:
    While developing
        Isolated
    While deploying
        Dependencies injected

Two things to make DI work:
    a) Classes that have dependencies (such as CatalogContext?)
        Inherit from DbContext
            public class CatalogContext : DbContext
    Specify DbContextOptions (DI parameter) in class constructor:
            public CatalogContext(DbContextOptions options) {}
    b) The sending end (Startup.cs)
        Before microservice starts up
        Pass these to any constructor that wants it


Note that settings values read in by Startup from a json config file
(prevents needing to recompile and redeploy when something changes)

---
WHAT
*** Create DbSet objects *** What (tables to go create)



Make db table of type each domain class (where to do?)
    public DbSet<CatalogBrand> CatalogBrands { get; set; }
    public DbSet<CatalogType> CatalogTypes { get; set; }
    public DbSet<CatalogItem> CatalogItems { get; set; }

Since you named it CatalogBrand, default name will be CatalogBrands




---
HOW
*** On CatalogContext : DbContext class, Override OnModelCreating() ***
How to create/configure tables

protected override void OnModelCreating(ModelBuilder modelBuilder)

do not call the base DbContext OnModelCreating
XX BAD NO: base.OnModelCreating(modelBuilder);


Now provide methods for EF to call when setting up tables
pass in set of methods inside a lambda statement

For each table:
modelBuilder.Entity<CatalogBrand> (e =>

e is of type EntityTypeBuider<CatalogBrand>
Note that Entity<CatalogBrand> is a method on the modelBuilder object
rather than a LINQ query.
That is, modelBuilder is a ModelBuilder object (not a collection of EntityTypeBuilder<CatalogBrand>)
This signature of the overload we're using is:
ModelBuilder.Entity<TEntity>(Action<EntityTypeBuilder<TEntity>>)
Specifically, the method accepts as a parameter one Action<EntityTypeBuilder<TEntity>>
which can be expressed as a lambda statement (or expression)

Essentially, for the EntityTypeBuider<CatalogBrand>, what commands to execute to set up the table

Set the name of the table (or accept the default of the class type pluralized)
e.ToTable("CatalogBrands");

Set the property of the class type to be the primary key of the table
e.Property(b => b.Id)
B is for brand
Pass in "A lambda expression representing the property to be configured"
Do not use the Property method that accepts a string parameter, that will break of the property name in the class changes.

Chain the next call:
    .IsRequired()
Make this field required

Chain one more call:
    .UseHiLo("catalog_brand_hilo");
Use HiLo technique
db gives you back a range
as a client you can pick any number in this range
Name the constraint so that the constraint can be modified or deleted later



Set the other property for the table (other, non-primary key)
e.Property(b => b.Brand)
    .IsRequired()
    .HasMaxLength(100);
For string fields, use appropriate Varchar (variable length) or char (fixed length)
HasMaxLength is Varchar

CatalogType table setup is similar:
modelBuilder.Entity<CatalogType>(e =>
                {
                    e.ToTable("CatalogTypes");
                    e.Property(t => t.Id)
                        .IsRequired()
                        .UseHiLo("catalog_type_hilo"); // Name the constraint
                    e.Property(t => t.Type)
                        .IsRequired()
                        .HasMaxLength(100);
                });


For CatalogItem,
            modelBuilder.Entity<CatalogItem>(e =>
                {
                    Note that you can name the db table differently than the the class type:
                    e.ToTable("Catalog");
                    'c' for catalog in the lambda statements
                    e.Property(c => c.Id)
                        .IsRequired()
                        .UseHiLo("catalog_hilo");
                    e.Property(c => c.Name)
                        .IsRequired()
                        .HasMaxLength(100);
                    e.Property(c => c.Price)
                        .IsRequired();

Foreign key relationship
                    // Three kinds of relationships in the db world:
                    // 1:1
                    // 1:M / M:1
                    // M:M

From the perspective of CatalogItem,
each CatalogItem has one CatalogType
                    e.HasOne(c => c.CatalogType)
                    Declaration for CatalogType on the CatalogItem class:
                            public virtual CatalogType CatalogType { get; set; }
                                            ^ member type ^ member name
                        .WithMany()
                    Each CatalogType has many CatalogItem
                        .HasForeignKey(c => c.CatalogTypeId);
                    Each CatalogItem has a key (a foreign key) to the CatalogType table
                    Declaration for CatalogTypeId on the CatalogItem class:
                            public int CatalogTypeId { get; set; }

Same for CatalogBrand:
                    e.HasOne(c => c.CatalogBrand)
                        .WithMany()
                        .HasForeignKey(c => c.CatalogBrandId);
DO Explicitly create foreign keys in your class types
If you don't specify a foreign key, you'll get one (a useless one that you can't reference) automatically

DONE configuring the Entity Framework (WHERE, WHAT AND HOW)


---
DI (Dependency Injection)

>>>
Now go to Startup.cs to set up DI
https://youtu.be/1k11n8FO_UU?list=PLdbymrfiqF-wmh3VsbxysBsu2O9w6Z3Ks&t=3232

Note constructor for Startup class:

        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

Go to appsettings.json to set up the objects to be represented by Configuration
(Everything in this step is for using LocalDb, will not be used once set up with Docker.)

>>>
// In VS:
// View > SQL Server Object Explorer
// Right click on MSSQLLocalDB, Properties

Copy ConnectionString:
// Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=master;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False

These are key value pairs seperated by semicolons

// Four pieces needed for Connection String:
// Where:             Data Source=(localdb)\\MSSQLLocalDB
// Name:              Initial Catalog=CatalogDb < ***IMPORTANT! NOT MASTER!***
// What security:     Integrated Security=True
// When to time out:  Connect Timeout=30

Remember to set the Initial Catalog to a value other than master.
Don't put your personal tables in the master db. That is for keeping track of all tables on your system.


>>>
Put at the very top of appsettings.json (outside of everything)

"Connection String" in double quotes, a colon (:), then the connection string in double quotes, followed by a comma (,)

??? QUESTION: IS A SEMICOLON AFTER THE FINAL ITEM IN THE CONNECTION STRING ALLOWED

  "ConnectionString": "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=CatalogDb;Integrated Security=True;Connect Timeout=30;",
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"

Discard the others.


>>>
Back to Startup.cs

Look at the Startup.ConfigureServices method:
        public void ConfigureServices(IServiceCollection services)
Configures your microservices.
Adds services to the container.
Called for you by the runtime.

Leave this call, we'll come back to it:
            services.AddControllers();

Recall that CatalogContext derives from DbContext,
    public class CatalogContext : DbContext
Services need a DbContext, specifically a CatalogContext

Startup will create a CatalogContext instance that will connect to your db


*** Inject DbContext into your service ***

 Recall the declaration of the constructor for the CatalogContext class:
    {
        // Dependency Injection
        public CatalogContext(DbContextOptions options) : base(options) { }

Register the CatalogContext (the DbContext) as a service in the IServicesCollection (services parameter on ConfigureServices)

services.AddDbContext<CatalogContext>( ... )
            // IServiceCollection.AddDbContext<CatalogContext>(Action<DbContextOptionsBuilder>)

services.AddDbContext<CatalogContext>(
    options =>
    options.UseSqlServer(Configuration["ConnectionString"]));

            //DbContextOptionsBuilder.
            //          UseSqlServer(String)

   options "Configures the context to connect to a Microsoft SQL Server database."
   Lookup the ConnectionString that we defined in appsettings.json with the "ConnectionString" key.

            // At this point,
            // a) My services need a database           services.AddDbContext
            // b) what kind of database?                <CatalogContext>
            // c) Startup creates an instance of CatalogContext
            // d) when it does so, it needs to pass     a DbContextOptionsBuilder  
            // e) use sql server                        (options => options.UseSqlServer
            // f) here is the connection string from the config that says where it is
            //                                      (Configuration["ConnectionString"]));

            // THEN:
            // DbContextOptions injected into the constructor for CatalogContext
            // which will in turn pass the options on to the base class (DbContext)
            // which is when Entity Framework will create the database there for you.

            // That is how you connect the object in memory to the actual SQL server

            // Now whenever you refer to CatalogContext in code, it knows which actual
            // physical db and table it needs to go to

            // Now have:
            // Models defined
            // Entity Framework defined
            // Now a matter of executing it and seeing it in action

            // Next time: Still have powershell commands to run



---

Class #11 3-7-20

High Level of today:

- CatalogSeed.cs:
    Write CatalogSeed class and Seed() method for seeding the db with sample data
-- CatalogSeed.Seed():
    Starting at tables with no dependencies, if no rows exist, add a range (collection) of preconfigured model/domain objects to the table on the DbContext. Save changes on the DbContext as needed before tables with dependencies on other tables.
-- CatalogSeed.GetPreconfiguredCatalogItems():
    Include placeholder host/domain path for wwwroot files: "http://externalcatalogbaseurltobereplaced/api/pic/1"
--- File Explorer / Solution Explorer (ProductCatalogApi.wwwroot):
    For all conent to be deployed with app (ex. jewels pics, shoes pics), create and drag files to wwwroot folder in ProductCatalogApi project.



- Program.cs:
    High level:
    Kick of building the host, wait for the db context to be ready, seed the db, then run the host.
-- Build() the host and save a handle to it; don't Run() it yet.
-- In a using statement (for Dispose()), CreateScope() on the Services of the host and save a handle to it.
-- Save a handle to the ServiceProvider of the scope.
-- For the serviceProviders, GetRequiredService<CatalogContext>(), which returns the CatalogContext (a DbContext) only when it is ready, save a handle to it.
-- Pass the saved context to CatalogSeed.Seed(context)
-- (The scope gets disposed at the end of the block.)
-- Run() the host


- Powershell:
    View > Other Windows > Package Manager Console
    PM> "Add-Migration Initial"
    Convert the instructions about WHERE, WHAT and HOW to create tables (from your CatalogContext class) to SQL-like syntax using the AddMigration Powershell script. The Migrations folder appears with the Initial migration inside.
- (Note to self:)
    Migration(s) applied automatically to the db since Seed() calls Migrate() on the DbContext before seeding the db with data. No need to use the UpdateDatabase Powershell script.


- View > SQL Server Object Explorer:
    Verify that MSSQLLocalDB is there and that CatalogDb is not (from Kal's code or previous run)
--  If MSSQLLocalDB is not there, add it.
    Refresh list (blue circle arrow).
    Open MSSQLLocalDB, delete CatalogDb if present.
- VS Toolbar / Select Startup Item (green run arrow):
    Run IIS Express (not Docker, Docker is not set up yet)
- View > SQL Server Object Explorer:
    Refresh list (blue circle arrow).
    Ensure that CatalogDb is present: MSSQLLocalDB > Databases > CatalogDb
    Open Tables, right click on a CatalogX table and View Data to verify data in db.


---

Class #12 3-8-20
Navigation:

- Dockerfile
- ProductCatalogApi\Controllers\PicController.cs
- Run (green arrow) in IIS Express + web browser
- Test in Postman




Dockerizing your application
Dockerize your microservice

Dockerfile contains instructions to be executed on the linux vm

** TODO **
Have someone walk me through the Dockerfile with precision and clarity


<< Where I stopped making well-formed precise notes, and switched to making rougher, "signpost-notes" >>


PicController.cs

(microservice) Controller class attributes (two):
[Route("api/[controller]")]
    // Route is a part of the URL
    // App will be hosted on a port
    // http://localhost:whateverport/restofthepathhereistheroute
    //                              /api/pic

    // Second attribute:
    // I am an Api
    [ApiController]

Controllers inherit from ControllerBase
    public class PicController : ControllerBase



On controller class, each individual method is an api


API/method parameter extracted from URL:
    Attribute on method:
        // On server-side code, we mark every api with its request type
        [HttpGet("{id}")]

                // Recall since GET request, user will not send any request body.
        // All data will come through the URL

        // When you get a GET request, whatever is in the curly braces will be
        // extracted into a variable of name id. 

Default route on a controller:
            // But wait, it's not /api/pic/getimage/1...why not?
        // Leaving off the /getimage means that whenever you get to
        // the PicController by going to /api/pic, you'll automatically
        // get routed to GetImage.


Constructing file paths to resources in wwwroot:

    Dependency Injection (DI) for getting the location of the wwwroot folder:
                // To recieve injection, modify the contstructor of the class

                // Microservices controller inject the path in which this
                // service is deployed.

                // To recieve injection, modify the contstructor of the Controller class

                        public PicController(IWebHostEnvironment env) : base()

                Note that you don't have to modify the declaration line of the class,
                only its constructor

                IWebHostEnvironment


    Use Path.Combine() to construct the path to your hosted resources:
        ("done in a cross-platform way"


    Reading binary files and serving them back to the user:
        System.IO.File.ReadAllBytes()

                    // Must fully resolve File class name since there is a name collision with base class ControllerBase

    Call ControllerBase.File(Byte[], String) to return a FileContentResult
            // Inheritance
            // Object -> ActionResult -> FileResult -> FileContentResult
            // Also ActionResult : IActionResult
            // Therefore, FileContentResult implements IActionResult
            // (is convertable to that type)



- Test API IIS/Browser
    // Go to the browser window that opened and modify the url
    // http://localhost:52750/api/pic/1

- Test in Postman



---

Class #13 3-14-20
Navigation:

- Controllers\CatalogController.cs
- appsettings.json (add ExternalCatalog)
- ViewModel\PaginatedItemsViewModel.cs


- Add CatalogController
First api that is meaningful to containerize

Of note for Kal starting with the PicController as the first controller...
it only relied on the file system (injected Iwebhostenv)
did not need a db connection



/api/catalog


- Inject CatalogContext context into CatalogController controller


QUESTION:
Could have done DI with the CatalogSeed class instead of passing the context to the Seed method directly?
Is it only done by direct passing because it is so convenient to do so?
The method that tells us it is ready returns exactly the reference we need, so why not simply pass it?

QUESTION:
Are there other use cases for looking up the db context as we did in Main, or is it always preferred to use DI?


- Query database table(s) to get needed data


+Almost all apis should be async (all apis that are called from the front end)
        // Async: Don't want to block your webui.
        // Don't want to block your front end from accessing your api back end.



+ Three ways to accept route params:
    * from uri
        (by [HttpGet("{id}")] as we did with PicController.GetImage)
        (or by [Route("[action]/{pageIndex}/{pageSize}")] as we *nearly* did with CatalogController.Items)
    * from query (the old way)
    http://jsdfkjdslkj/?k=v&k=v
    * From body
    we will do when talking about post


- Paginating data from a database (instead of returning all of it):

Given a page size and page number/index,
return the appropriate set of items to the caller

(UI logic must mimic this pattern)

Skip and take:
    How many records to skip
    How many records to take



(Always provide defaults for URL params to prevent breaking.)


- Items api done with [FromQuery] http://jsdfkjdslkj/?k=v&k=v



- Recall IActionResult
    ? Was there a Task<> around IActionResult of GetImage?
    Is there a 1:1 correlation between a method being async and needing Task<> around its return type?
    Is it Task's job to run the (remind me name of method) on the IActionResult return object?
    Is Task<> only ever used with IActionResult?
    Is IActionResult only ever used with Task<>?

    Ok() asp.net method returns a Task<IActionResult>?


    ? IActionResult represents an api return object whose value is immediately avail upon return (as with PicController), that is, from a non-async (synchronous) api.

    ? Task<IActionResult> represents an api return object whose value may not be immediately avail upon return (as with Item), that is, from an async api.
        QUESTION: How does the caller know when the value is ready?


- Test in Postman
    Create collection to save queries
            // Remember to make sure that the correct request type is selected:
            // GET, POST, etc.


- appsettings.json: Fix the pic url
    Did not seed full path into pic urls
    Port number may differ also docker

    Inject IConfiguration into CatalogController class (via constructor)

    Then replace all of the placeholder text in the pic urls with the correct path:
    Set the PictureUrl property on each item with the value looked up in appsettings.json by key/value lookup

                // When an object (_config) refers to the IConfigration object
            // that is read in from the appsettings.json
            // Treat the object as a dictionary and use array subscript notation
            // to look up the value by key:
            // _config["Key"]


    + Port number of the container hosting the pic files is fixed as of the time of deployment


+ Never accept port numbers as params, big security risk


+ CatalogController api is one api that calls another (PicController)
QUESTION: CatalogController doesn't directly call PicController, though, right?
It converts the url, but the PicController is queried by the user of CatalogController?


- help out the client
    also give more info about data that you are sending
    things that the view needs to know in order to be able to render properly
        how do I know how many items I really got?
        how many are left?
        how does ui know?
-- Revise Items api to return a PaginatedItemsViewModel<CatalogItem> (instead of a ...)
Make a viewmodel called PaginatedItemsViewModel<>
Generic so can re-use the paginated feature for other data
+ no difference between ViewModel in MVC and ViewModel in MVVM
---What is all the data that the page needs?
    PageIndex
    PageSize
    ItemCount
    Data (collection of items)


Now, Items()
returns a wrapped PaginatedItemsViewModel<CatalogItem> instead of a wrapped List<ViewItem>
Wrapper is an OkObjectResult

QUESTION:
In this example of MVC,
Instead of the ViewModel querying the model for the data it needs, the controller returns a ViewModel to the view?


+ If number of records won't fit in a long...that's millions of records
    Better to consider partitioning the data
    Archiving old data, keeping the data clean.


+ When you query the db, you need to await an async method


- Test in Postman again
 (See PaginatedViewModel working)

 